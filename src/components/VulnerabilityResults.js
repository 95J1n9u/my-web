import React, { useState } from 'react';
import analysisService from '../services/analysisService';

const VulnerabilityResults = ({ 
  results, 
  comparisonResults, 
  isAnalyzing, 
  error, 
  selectedFramework, 
  frameworks, 
  onRetry, 
  onReset 
}) => {
  const [selectedSeverity, setSelectedSeverity] = useState('전체');
  const [expandedCard, setExpandedCard] = useState(null);
  const [viewMode, setViewMode] = useState('single'); // 'single' or 'comparison'
  const [selectedComparisonFramework, setSelectedComparisonFramework] = useState(null);

  // 비교 모드 초기화
  React.useEffect(() => {
    if (comparisonResults) {
      setViewMode('comparison');
      const firstFramework = Object.keys(comparisonResults.frameworks)[0];
      setSelectedComparisonFramework(firstFramework);
    } else if (results) {
      setViewMode('single');
    }
  }, [comparisonResults, results]);

  // 로딩 상태
  if (isAnalyzing) {
    return (
      <div className="flex items-center justify-center h-96">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-4 border-blue-600 mx-auto mb-4"></div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">설정 파일 분석 중...</h3>
          <p className="text-gray-500">
            {comparisonResults ? '다중 지침서 비교 분석을' : `${selectedFramework} 보안 룰셋을`} 적용하여 취약점을 탐지하고 있습니다
          </p>
          <div className="mt-4 text-sm text-gray-400">
            <p>평균 분석 시간: 10-30초</p>
          </div>
        </div>
      </div>
    );
  }

  // 에러 상태
  if (error) {
    return (
      <div className="space-y-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">분석 결과</h1>
          <p className="text-gray-600">보안 취약점 분석 중 오류가 발생했습니다</p>
        </div>
        
        <div className="flex items-center justify-center h-96">
          <div className="text-center max-w-md">
            <svg className="w-16 h-16 text-red-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                    d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z" />
            </svg>
            <h3 className="text-lg font-medium text-gray-900 mb-2">분석 실패</h3>
            <p className="text-gray-500 mb-6">{error}</p>
            <div className="flex space-x-3 justify-center">
              <button
                onClick={onRetry}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200"
              >
                다시 시도
              </button>
              <button
                onClick={onReset}
                className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors duration-200"
              >
                새 파일 업로드
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // 결과 없음
  if (!results && !comparisonResults) {
    return (
      <div className="flex items-center justify-center h-96">
        <div className="text-center">
          <svg className="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                  d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
          </svg>
          <h3 className="text-lg font-medium text-gray-900 mb-2">분석 결과 없음</h3>
          <p className="text-gray-500">취약점 분석 결과를 보려면 설정 파일을 업로드하세요</p>
        </div>
      </div>
    );
  }

  // 현재 표시할 결과 가져오기
  const getCurrentDisplayResults = () => {
    if (viewMode === 'comparison' && comparisonResults) {
      const frameworkResult = comparisonResults.frameworks[selectedComparisonFramework];
      return frameworkResult && !frameworkResult.error ? frameworkResult : null;
    }
    return results;
  };

  const currentResults = getCurrentDisplayResults();
  const getFrameworkInfo = (frameworkId) => analysisService.getFrameworkInfo(frameworkId);

  const severityColors = {
    '고위험': 'bg-red-100 text-red-800 border-red-200',
    '중위험': 'bg-yellow-100 text-yellow-800 border-yellow-200',
    '저위험': 'bg-blue-100 text-blue-800 border-blue-200',
    'Critical': 'bg-red-200 text-red-900 border-red-300',
    'High': 'bg-red-100 text-red-800 border-red-200',
    'Medium': 'bg-yellow-100 text-yellow-800 border-yellow-200',
    'Low': 'bg-blue-100 text-blue-800 border-blue-200'
  };

  const severityIcons = {
    '고위험': (
      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
              d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z" />
      </svg>
    ),
    '중위험': (
      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
              d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
    ),
    '저위험': (
      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
              d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
    ),
    'Critical': (
      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
              d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z" />
      </svg>
    ),
    'High': (
      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
              d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z" />
      </svg>
    ),
    'Medium': (
      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
              d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
    ),
    'Low': (
      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
              d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
    )
  };

  // 심각도 표시를 위한 변환
  const getSeverityDisplay = (severity) => {
    const mapping = {
      'High': '고위험',
      'Medium': '중위험',
      'Low': '저위험',
      'Critical': '최고위험'
    };
    return mapping[severity] || severity;
  };

  // 카테고리 표시를 위한 변환
  const getCategoryDisplay = (category) => {
    const mapping = {
      'Authentication': '인증',
      'Access Control': '접근 제어',
      'Function Management': '기능 관리',
      'Log Management': '로그 관리',
      'Patch Management': '패치 관리',
      'Asset Management': '자산 관리',
      'Configuration': '설정 관리'
    };
    return mapping[category] || category;
  };

  const filteredVulnerabilities = currentResults && selectedSeverity === '전체' 
    ? currentResults.vulnerabilities 
    : currentResults?.vulnerabilities?.filter(vuln => {
        const displaySeverity = getSeverityDisplay(vuln.severity);
        return displaySeverity === selectedSeverity;
      }) || [];

  const handleExportReport = () => {
    const reportData = {
      type: viewMode === 'comparison' ? 'comparison' : 'single',
      timestamp: new Date().toISOString(),
      ...(viewMode === 'comparison' ? {
        comparisonResults,
        summary: comparisonResults.summary
      } : {
        results: currentResults,
        framework: currentResults?.metadata?.framework,
        summary: currentResults?.summary
      }),
      exportTime: new Date().toISOString()
    };
    
    const dataStr = JSON.stringify(reportData, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    const filename = viewMode === 'comparison' 
      ? `security-comparison-report-${new Date().toISOString().split('T')[0]}.json`
      : `security-analysis-report-${currentResults?.metadata?.framework || 'unknown'}-${new Date().toISOString().split('T')[0]}.json`;
    link.download = filename;
    link.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      {/* Page Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">분석 결과</h1>
          <p className="text-gray-600">
            {viewMode === 'comparison' ? '다중 지침서 비교 분석 결과' : `${currentResults?.metadata?.framework || selectedFramework} 보안 분석 결과`}
            {currentResults?.metadata && (
              <span className="text-sm text-gray-500 ml-2">
                ({currentResults.metadata.deviceType} • {currentResults.metadata.totalLines}줄 • 
                {currentResults.metadata.analysisTime?.toFixed(2)}초 소요)
              </span>
            )}
          </p>
        </div>
        <div className="flex space-x-3">
          {/* View Mode Toggle */}
          {comparisonResults && (
            <div className="flex bg-gray-100 rounded-lg p-1">
              <button
                onClick={() => setViewMode('single')}
                className={`px-3 py-1 text-sm font-medium rounded-md transition-colors duration-200 ${
                  viewMode === 'single' ? 'bg-white text-gray-900 shadow-sm' : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                단일 보기
              </button>
              <button
                onClick={() => setViewMode('comparison')}
                className={`px-3 py-1 text-sm font-medium rounded-md transition-colors duration-200 ${
                  viewMode === 'comparison' ? 'bg-white text-gray-900 shadow-sm' : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                비교 보기
              </button>
            </div>
          )}
          
          <button 
            onClick={handleExportReport}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200"
          >
            <svg className="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                    d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            보고서 내보내기
          </button>
          <button 
            onClick={onReset}
            className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors duration-200"
          >
            <svg className="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                    d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
            </svg>
            새 분석 시작
          </button>
        </div>
      </div>

      {/* Framework Selection for Comparison Mode */}
      {viewMode === 'comparison' && comparisonResults && (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <h3 className="text-sm font-medium text-gray-900 mb-3">비교 지침서 선택</h3>
          <div className="flex space-x-2">
            {Object.entries(comparisonResults.frameworks).map(([frameworkId, result]) => {
              const info = getFrameworkInfo(frameworkId);
              const hasError = result.error;
              
              return (
                <button
                  key={frameworkId}
                  onClick={() => setSelectedComparisonFramework(frameworkId)}
                  className={`px-3 py-2 text-sm font-medium rounded-lg border transition-colors duration-200 ${
                    selectedComparisonFramework === frameworkId
                      ? 'border-blue-500 bg-blue-50 text-blue-700'
                      : hasError
                        ? 'border-red-300 bg-red-50 text-red-600'
                        : 'border-gray-300 bg-white text-gray-700 hover:border-gray-400'
                  } ${hasError ? 'cursor-not-allowed' : 'cursor-pointer'}`}
                  disabled={hasError}
                >
                  <div className="flex items-center space-x-2">
                    {info && (
                      <span 
                        className="w-3 h-3 rounded-full"
                        style={{ backgroundColor: info.color }}
                      />
                    )}
                    <span>{frameworkId}</span>
                    {hasError && (
                      <svg className="w-4 h-4 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                              d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z" />
                      </svg>
                    )}
                  </div>
                </button>
              );
            })}
          </div>
          
          {/* Comparison Summary */}
          <div className="mt-4 p-3 bg-gray-50 rounded-lg">
            <div className="grid grid-cols-3 gap-4 text-sm">
              <div>
                <span className="text-gray-600">분석된 지침서:</span>
                <span className="ml-1 font-medium">{Object.keys(comparisonResults.frameworks).length}개</span>
              </div>
              <div>
                <span className="text-gray-600">성공한 분석:</span>
                <span className="ml-1 font-medium text-green-600">
                  {Object.values(comparisonResults.frameworks).filter(r => !r.error).length}개
                </span>
              </div>
              <div>
                <span className="text-gray-600">총 발견 취약점:</span>
                <span className="ml-1 font-medium text-red-600">
                  {Object.values(comparisonResults.frameworks)
                    .filter(r => !r.error)
                    .reduce((sum, r) => sum + (r.summary?.vulnerabilities || 0), 0)}개
                </span>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Summary Cards */}
      {currentResults && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center">
              <div className="p-2 bg-blue-100 rounded-lg">
                <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                        d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">총 검사 항목</p>
                <p className="text-2xl font-bold text-gray-900">{currentResults.summary.totalChecks}</p>
                <div className="text-xs text-gray-500">
                  {currentResults.metadata?.framework || selectedFramework} 지침서
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center">
              <div className="p-2 bg-red-100 rounded-lg">
                <svg className="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                        d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">발견된 취약점</p>
                <p className="text-2xl font-bold text-red-600">{currentResults.summary.vulnerabilities}</p>
                <div className="text-xs text-gray-500">
                  고:{currentResults.summary.highSeverity} 중:{currentResults.summary.mediumSeverity} 저:{currentResults.summary.lowSeverity}
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center">
              <div className="p-2 bg-yellow-100 rounded-lg">
                <svg className="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                        d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">보안 점수</p>
                <p className="text-2xl font-bold text-yellow-600">
                  {Math.round((currentResults.summary.passed / (currentResults.summary.totalChecks || 1)) * 100)}점
                </p>
                <div className="text-xs text-gray-500">100점 만점</div>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                        d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">통과 항목</p>
                <p className="text-2xl font-bold text-green-600">{currentResults.summary.passed}</p>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Filter and Vulnerabilities List */}
      {currentResults && (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200">
          <div className="px-6 py-4 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-gray-900">
                탐지된 취약점 ({filteredVulnerabilities.length}개)
                {viewMode === 'comparison' && selectedComparisonFramework && (
                  <span className="ml-2 text-sm font-normal text-gray-500">
                    - {selectedComparisonFramework} 지침서
                  </span>
                )}
              </h3>
              <div className="flex space-x-2">
                {['전체', '고위험', '중위험', '저위험'].map((severity) => (
                  <button
                    key={severity}
                    onClick={() => setSelectedSeverity(severity)}
                    className={`px-3 py-1 text-sm font-medium rounded-full transition-colors duration-200 ${
                      selectedSeverity === severity
                        ? 'bg-blue-100 text-blue-800'
                        : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                    }`}
                  >
                    {severity}
                  </button>
                ))}
              </div>
            </div>
          </div>
          
          <div className="p-6">
            {filteredVulnerabilities.length === 0 ? (
              <div className="text-center py-8">
                <svg className="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                        d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <p className="text-gray-500">
                  {selectedSeverity === '전체' 
                    ? '취약점이 발견되지 않았습니다. 훌륭한 보안 설정입니다!' 
                    : `${selectedSeverity} 취약점이 없습니다.`
                  }
                </p>
              </div>
            ) : (
              <div className="space-y-4">
                {filteredVulnerabilities.map((vulnerability) => (
                  <div key={vulnerability.id} className="border border-gray-200 rounded-lg">
                    <div
                      className="p-4 cursor-pointer hover:bg-gray-50 transition-colors duration-200"
                      onClick={() => setExpandedCard(expandedCard === vulnerability.id ? null : vulnerability.id)}
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${
                            severityColors[vulnerability.severity] || severityColors[getSeverityDisplay(vulnerability.severity)]
                          }`}>
                            {severityIcons[vulnerability.severity] || severityIcons[getSeverityDisplay(vulnerability.severity)]}
                            <span className="ml-1">{getSeverityDisplay(vulnerability.severity)}</span>
                          </span>
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                            {getCategoryDisplay(vulnerability.type || vulnerability.typeKo)}
                          </span>
                          {vulnerability.ruleId && (
                            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                              {vulnerability.ruleId}
                            </span>
                          )}
                          {vulnerability.framework && (
                            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                              {vulnerability.framework}
                            </span>
                          )}
                        </div>
                        <svg
                          className={`w-5 h-5 text-gray-400 transition-transform duration-200 ${
                            expandedCard === vulnerability.id ? 'transform rotate-180' : ''
                          }`}
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                        </svg>
                      </div>
                      <div className="mt-2">
                        <h4 className="text-sm font-medium text-gray-900">
                          {vulnerability.description}
                        </h4>
                        {vulnerability.line && (
                          <p className="text-xs text-gray-500 mt-1">
                            라인 {vulnerability.line}: {vulnerability.matchedText}
                          </p>
                        )}
                      </div>
                    </div>
                    
                    {expandedCard === vulnerability.id && (
                      <div className="px-4 pb-4 border-t border-gray-100">
                        <div className="pt-4">
                          <h5 className="text-sm font-medium text-gray-900 mb-2">권장 사항:</h5>
                          <p className="text-sm text-gray-600 mb-4">
                            {vulnerability.recommendation}
                          </p>
                          
                          {vulnerability.reference && (
                            <div className="mb-4">
                              <h5 className="text-sm font-medium text-gray-900 mb-1">참고 자료:</h5>
                              <p className="text-xs text-gray-500">{vulnerability.reference}</p>
                            </div>
                          )}
                          
                          <div className="flex space-x-3">
                            <button className="px-3 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 transition-colors duration-200">
                              해결됨으로 표시
                            </button>
                            <button className="px-3 py-1 border border-gray-300 text-gray-700 text-xs rounded hover:bg-gray-50 transition-colors duration-200">
                              세부 정보 복사
                            </button>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityResults;