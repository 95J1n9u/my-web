import React, { useState } from 'react';
import analysisService from '../services/analysisService';
import { sanitizeHtml, sanitizeText } from '../utils/sanitizer';
import AIRemediation from './AIRemediation';

const VulnerabilityResults = ({
  results,
  comparisonResults,
  isAnalyzing,
  error,
  selectedFramework,
  frameworks,
  onRetry,
  onReset,
  user, // 기존 prop
  isHistorical = false, // 새로 추가된 prop (기본값 false)
  originalConfigText = '',
}) => {
  const [selectedSeverity, setSelectedSeverity] = useState('전체');
  const [expandedCard, setExpandedCard] = useState(null);
  const [viewMode, setViewMode] = useState('single'); // 'single' or 'comparison'
  const [selectedComparisonFramework, setSelectedComparisonFramework] = useState(null);
  const [aiResults, setAiResults] = useState(null);
  const [isAiLoading, setIsAiLoading] = useState(false);
  const [aiError, setAiError] = useState(null);
  const [showAiRemediation, setShowAiRemediation] = useState(false);


  // 비교 모드 초기화
  React.useEffect(() => {
    if (comparisonResults) {
      setViewMode('comparison');
      const firstFramework = Object.keys(comparisonResults.frameworks)[0];
      setSelectedComparisonFramework(firstFramework);
    } else if (results) {
      setViewMode('single');
    }
  }, [comparisonResults, results]);

  // 로딩 상태
  if (isAnalyzing) {
    return (
      <div className="flex items-center justify-center h-96">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-4 border-blue-600 mx-auto mb-4"></div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            설정 파일 분석 중...
          </h3>
          <p className="text-gray-500">
            {comparisonResults
              ? '다중 지침서 비교 분석을'
              : `${selectedFramework} 보안 룰셋을`}{' '}
            적용하여 취약점을 탐지하고 있습니다
          </p>
          <div className="mt-4 text-sm text-gray-400">
            <p>평균 분석 시간: 10-30초</p>
            {selectedFramework === 'NW' && (
              <p className="text-blue-500">NW 지침서는 42개 룰을 검사합니다</p>
            )}
          </div>
        </div>
      </div>
    );
  }

  // 에러 상태
  if (error) {
    return (
      <div className="space-y-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">분석 결과</h1>
          <p className="text-gray-600">
            보안 취약점 분석 중 오류가 발생했습니다
          </p>
        </div>

        <div className="flex items-center justify-center h-96">
          <div className="text-center max-w-md">
            <svg
              className="w-16 h-16 text-red-400 mx-auto mb-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"
              />
            </svg>
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              분석 실패
            </h3>
            <p className="text-gray-500 mb-6">{error}</p>
            <div className="flex space-x-3 justify-center">
              <button
                onClick={onRetry}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200"
              >
                다시 시도
              </button>
              <button
                onClick={onReset}
                className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors duration-200"
              >
                새 파일 업로드
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // 결과 없음
  if (!results && !comparisonResults) {
    return (
      <div className="flex items-center justify-center h-96">
        <div className="text-center">
          <svg
            className="w-16 h-16 text-gray-400 mx-auto mb-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
            />
          </svg>
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            분석 결과 없음
          </h3>
          <p className="text-gray-500">
            취약점 분석 결과를 보려면 설정 파일을 업로드하세요
          </p>
        </div>
      </div>
    );
  }

  // 현재 표시할 결과 가져오기
  const getCurrentDisplayResults = () => {
    if (viewMode === 'comparison' && comparisonResults) {
      const frameworkResult =
        comparisonResults.frameworks[selectedComparisonFramework];
      return frameworkResult && !frameworkResult.error ? frameworkResult : null;
    }
    return results;
  };
const handleGetAIRemediation = async () => {
  if (!currentResults || !currentResults.vulnerabilities?.length) {
    alert('AI 조치 방안을 생성하기 위해서는 취약점 분석 결과가 필요합니다.');
    return;
  }

  if (!originalConfigText) {
    alert('원본 설정 파일 내용이 필요합니다. 파일을 다시 업로드해주세요.');
    return;
  }

  setIsAiLoading(true);
  setAiError(null);

  try {
    // API 서버 상태 먼저 확인
    console.log('AI API 서버 상태 확인 중...');
    try {
      const healthCheck = await analysisService.checkAIApiHealth();
      console.log('AI API 서버 상태:', healthCheck);
    } catch (healthError) {
      console.error('AI API 서버 연결 실패:', healthError);
      throw new Error(`AI API 서버 연결 실패: ${healthError.message}`);
    }

    // 현재 분석 결과를 AI API 형식으로 변환
    console.log('분석 결과 변환 중...');
    const aiFormatData = analysisService.transformToAIFormat(currentResults, originalConfigText);
    console.log('변환된 데이터:', {
      configLength: aiFormatData.original_config.length,
      vulnerabilityCount: aiFormatData.vulnerability_report.vulnerabilities.length,
      framework: aiFormatData.vulnerability_report.metadata.framework,
      deviceType: aiFormatData.vulnerability_report.metadata.deviceType
    });
    
    // AI 조치 방안 요청
    console.log('AI 조치 방안 요청 중...');
    const aiResult = await analysisService.getAIRemediation(
      aiFormatData.original_config,
      aiFormatData.vulnerability_report
    );

    console.log('AI 조치 방안 응답 받음:', aiResult);
    setAiResults(aiResult);
    setShowAiRemediation(true);
  } catch (error) {
    console.error('AI 조치 방안 요청 실패:', error);
    setAiError(error.message);
    
    // 사용자 친화적인 오류 메시지
    let userMessage = '';
    if (error.message.includes('네트워크 연결 오류')) {
      userMessage = '인터넷 연결을 확인하고 다시 시도해주세요.';
    } else if (error.message.includes('데이터 검증')) {
      userMessage = '분석 데이터 형식에 문제가 있습니다. 다시 분석을 시도해주세요.';
    } else if (error.message.includes('내부 오류')) {
      userMessage = 'AI 서버에 일시적인 문제가 발생했습니다. 잠시 후 다시 시도해주세요.';
    } else {
      userMessage = error.message;
    }
    
    alert(`AI 조치 방안 생성 실패:\n${userMessage}`);
  } finally {
    setIsAiLoading(false);
  }
};
const handleRetryAIRemediation = () => {
  setShowAiRemediation(false);
  setAiResults(null);
  setAiError(null);
  setTimeout(() => {
    handleGetAIRemediation();
  }, 500);
};
  const currentResults = getCurrentDisplayResults();
  const getFrameworkInfo = frameworkId =>
    analysisService.getFrameworkInfo(frameworkId);

  const severityColors = {
    고위험: 'bg-red-100 text-red-800 border-red-200',
    중위험: 'bg-yellow-100 text-yellow-800 border-yellow-200',
    저위험: 'bg-blue-100 text-blue-800 border-blue-200',
    Critical: 'bg-red-200 text-red-900 border-red-300',
    High: 'bg-red-100 text-red-800 border-red-200',
    Medium: 'bg-yellow-100 text-yellow-800 border-yellow-200',
    Low: 'bg-blue-100 text-blue-800 border-blue-200',
    상: 'bg-red-100 text-red-800 border-red-200',
    중: 'bg-yellow-100 text-yellow-800 border-yellow-200',
    하: 'bg-blue-100 text-blue-800 border-blue-200',
  };

  const severityIcons = {
    고위험: (
      <svg
        className="w-5 h-5"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"
        />
      </svg>
    ),
    중위험: (
      <svg
        className="w-5 h-5"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
        />
      </svg>
    ),
    저위험: (
      <svg
        className="w-5 h-5"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
        />
      </svg>
    ),
    Critical: (
      <svg
        className="w-5 h-5"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"
        />
      </svg>
    ),
    High: (
      <svg
        className="w-5 h-5"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"
        />
      </svg>
    ),
    Medium: (
      <svg
        className="w-5 h-5"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
        />
      </svg>
    ),
    Low: (
      <svg
        className="w-5 h-5"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
        />
      </svg>
    ),
    상: (
      <svg
        className="w-5 h-5"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"
        />
      </svg>
    ),
    중: (
      <svg
        className="w-5 h-5"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
        />
      </svg>
    ),
    하: (
      <svg
        className="w-5 h-5"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
        />
      </svg>
    ),
  };

  // 심각도 표시를 위한 변환
  const getSeverityDisplay = severity => {
    const mapping = {
      High: '고위험',
      Medium: '중위험',
      Low: '저위험',
      Critical: '최고위험',
      상: '고위험',
      중: '중위험',
      하: '저위험',
    };
    return mapping[severity] || severity;
  };

  // 카테고리 표시를 위한 변환
  const getCategoryDisplay = category => {
    const mapping = {
      Authentication: '인증',
      'Access Control': '접근 제어',
      'Function Management': '기능 관리',
      'Log Management': '로그 관리',
      'Patch Management': '패치 관리',
      'Asset Management': '자산 관리',
      Configuration: '설정 관리',
      '계정 관리': '계정 관리',
      '접근 관리': '접근 관리',
      '기능 관리': '기능 관리',
      '로그 관리': '로그 관리',
      '패치 관리': '패치 관리',
    };
    return mapping[category] || category;
  };

  const filteredVulnerabilities =
    currentResults && selectedSeverity === '전체'
      ? currentResults.vulnerabilities
      : currentResults?.vulnerabilities?.filter(vuln => {
          const displaySeverity = getSeverityDisplay(vuln.severity);
          return displaySeverity === selectedSeverity;
        }) || [];

  const handleExportReport = () => {
    const reportData = {
      type: viewMode === 'comparison' ? 'comparison' : 'single',
      timestamp: new Date().toISOString(),
      ...(viewMode === 'comparison'
        ? {
            comparisonResults,
            summary: comparisonResults.summary,
          }
        : {
            results: currentResults,
            framework: currentResults?.metadata?.framework,
            summary: currentResults?.summary,
          }),
      exportTime: new Date().toISOString(),
      engineVersion:
        currentResults?.metadata?.engineVersion || 'Multi-Framework 1.0',
    };

    const dataStr = JSON.stringify(reportData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    const filename =
      viewMode === 'comparison'
        ? `security-comparison-report-${new Date().toISOString().split('T')[0]}.json`
        : `security-analysis-report-${currentResults?.metadata?.framework || 'unknown'}-${new Date().toISOString().split('T')[0]}.json`;
    link.download = filename;
    link.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
{/* Page Header */}
<div className="flex items-center justify-between">
  <div>
    <h1 className="text-3xl font-bold text-gray-900">
      {isHistorical ? '분석 기록 상세보기' : '분석 결과'}
    </h1>
    <p className="text-gray-600">
      {isHistorical && (
        <span className="inline-flex items-center px-2 py-1 text-xs font-medium bg-purple-100 text-purple-800 rounded-full mr-2">
          <svg className="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          저장된 기록
        </span>
      )}
      {viewMode === 'comparison'
        ? '다중 지침서 비교 분석 결과'
        : `${currentResults?.metadata?.framework || selectedFramework} 보안 분석 결과`}
      {currentResults?.metadata && (
        <span className="text-sm text-gray-500 ml-2">
          ({currentResults.metadata.deviceType} •{' '}
          {currentResults.metadata.totalLines}줄 •
          {currentResults.metadata.analysisTime?.toFixed(2)}초 소요)
        </span>
      )}
      {isHistorical && currentResults?.fileName && (
        <span className="text-sm text-gray-500 ml-2">
          • 파일: {currentResults.fileName}
        </span>
      )}
    </p>
  </div>
  <div className="flex space-x-3">
      {/* AI 조치 방안 버튼 (새로 추가) */}
  {currentResults && currentResults.vulnerabilities?.length > 0 && !isHistorical && (
    <button
      onClick={handleGetAIRemediation}
      disabled={isAiLoading}
      className="px-4 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-lg hover:from-purple-700 hover:to-indigo-700 transition-all duration-200 disabled:opacity-50"
    >
      {isAiLoading ? (
        <>
          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white inline mr-2"></div>
          AI 분석 중...
        </>
      ) : (
        <>
          <svg
            className="w-4 h-4 inline mr-2"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"
            />
          </svg>
          AI 조치 방안 생성
        </>
      )}
    </button>
  )}
    {/* 기존 버튼들... */}
    
    {/* 기록 보기에서는 새 분석 시작 버튼 강조 */}
    {isHistorical ? (
      <button
        onClick={onReset}
        className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200"
      >
        <svg
          className="w-4 h-4 inline mr-2"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"
          />
        </svg>
        새 분석 시작
      </button>
    ) : (
      <>
        <button
          onClick={handleExportReport}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200"
        >
          <svg
            className="w-4 h-4 inline mr-2"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
            />
          </svg>
          보고서 내보내기
        </button>
        <button
          onClick={onReset}
          className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors duration-200"
        >
          <svg
            className="w-4 h-4 inline mr-2"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"
            />
          </svg>
          새 분석 시작
        </button>
      </>
    )}
  </div>
</div>

      {/* Framework Selection for Comparison Mode */}
      {viewMode === 'comparison' && comparisonResults && (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <h3 className="text-sm font-medium text-gray-900 mb-3">
            비교 지침서 선택
          </h3>
          <div className="flex flex-wrap gap-2">
            {Object.entries(comparisonResults.frameworks).map(
              ([frameworkId, result]) => {
                const info = getFrameworkInfo(frameworkId);
                const hasError = result.error;

                return (
                  <button
                    key={frameworkId}
                    onClick={() => setSelectedComparisonFramework(frameworkId)}
                    className={`px-3 py-2 text-sm font-medium rounded-lg border transition-colors duration-200 ${
                      selectedComparisonFramework === frameworkId
                        ? 'border-blue-500 bg-blue-50 text-blue-700'
                        : hasError
                          ? 'border-red-300 bg-red-50 text-red-600'
                          : 'border-gray-300 bg-white text-gray-700 hover:border-gray-400'
                    } ${hasError ? 'cursor-not-allowed' : 'cursor-pointer'}`}
                    disabled={hasError}
                  >
                    <div className="flex items-center space-x-2">
                      {info && (
                        <span
                          className="w-3 h-3 rounded-full"
                          style={{ backgroundColor: info.color }}
                        />
                      )}
                      <span>{frameworkId}</span>
                      {!hasError && result.issuesFound !== undefined && (
                        <span className="text-xs">
                          ({result.issuesFound}개)
                        </span>
                      )}
                      {hasError && (
                        <svg
                          className="w-4 h-4 text-red-500"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"
                          />
                        </svg>
                      )}
                    </div>
                  </button>
                );
              }
            )}
          </div>

          {/* Comparison Summary */}
          <div className="mt-4 p-3 bg-gray-50 rounded-lg">
            <div className="grid grid-cols-4 gap-4 text-sm">
              <div>
                <span className="text-gray-600">분석된 지침서:</span>
                <span className="ml-1 font-medium">
                  {Object.keys(comparisonResults.frameworks).length}개
                </span>
              </div>
              <div>
                <span className="text-gray-600">성공한 분석:</span>
                <span className="ml-1 font-medium text-green-600">
                  {
                    Object.values(comparisonResults.frameworks).filter(
                      r => !r.error
                    ).length
                  }
                  개
                </span>
              </div>
              <div>
                <span className="text-gray-600">총 발견 취약점:</span>
                <span className="ml-1 font-medium text-red-600">
                  {Object.values(comparisonResults.frameworks)
                    .filter(r => !r.error)
                    .reduce(
                      (sum, r) =>
                        sum +
                        (r.summary?.vulnerabilities || r.issuesFound || 0),
                      0
                    )}
                  개
                </span>
              </div>
              <div>
                <span className="text-gray-600">평균 보안 점수:</span>
                <span className="ml-1 font-medium text-blue-600">
                  {Math.round(
                    Object.values(comparisonResults.frameworks)
                      .filter(r => !r.error)
                      .reduce((sum, r) => {
                        const total =
                          r.summary?.totalChecks ||
                          r.statistics?.totalRulesChecked ||
                          1;
                        const passed =
                          r.summary?.passed || r.statistics?.rulesPassed || 0;
                        return sum + (passed / total) * 100;
                      }, 0) /
                      Object.values(comparisonResults.frameworks).filter(
                        r => !r.error
                      ).length
                  )}
                  점
                </span>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Summary Cards */}
      {currentResults && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center">
              <div className="p-2 bg-blue-100 rounded-lg">
                <svg
                  className="w-6 h-6 text-blue-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
                  />
                </svg>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">
                  총 검사 항목
                </p>
                <p className="text-2xl font-bold text-gray-900">
                  {currentResults.summary?.totalChecks ||
                    currentResults.statistics?.totalRulesChecked ||
                    0}
                </p>
                <div className="text-xs text-gray-500">
                  {currentResults.metadata?.framework || selectedFramework}{' '}
                  지침서
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center">
              <div className="p-2 bg-red-100 rounded-lg">
                <svg
                  className="w-6 h-6 text-red-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"
                  />
                </svg>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">
                  발견된 취약점
                </p>
                <p className="text-2xl font-bold text-red-600">
                  {currentResults.summary?.vulnerabilities ||
                    currentResults.issuesFound ||
                    0}
                </p>
                <div className="text-xs text-gray-500">
                  고:{currentResults.summary?.highSeverity || 0} 중:
                  {currentResults.summary?.mediumSeverity || 0} 저:
                  {currentResults.summary?.lowSeverity || 0}
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center">
              <div className="p-2 bg-yellow-100 rounded-lg">
                <svg
                  className="w-6 h-6 text-yellow-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">보안 점수</p>
                <p className="text-2xl font-bold text-yellow-600">
                  {(() => {
                    const total =
                      currentResults.summary?.totalChecks ||
                      currentResults.statistics?.totalRulesChecked ||
                      1;
                    const passed =
                      currentResults.summary?.passed ||
                      currentResults.statistics?.rulesPassed ||
                      0;
                    return Math.round((passed / total) * 100);
                  })()}
                  점
                </p>
                <div className="text-xs text-gray-500">100점 만점</div>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <svg
                  className="w-6 h-6 text-green-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">통과 항목</p>
                <p className="text-2xl font-bold text-green-600">
                  {currentResults.summary?.passed ||
                    currentResults.statistics?.rulesPassed ||
                    0}
                </p>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Analysis Metadata - 이제 취약점 목록 위에 위치 */}
      {currentResults?.metadata && (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">
            분석 상세 정보
          </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div>
                <div className="text-sm font-medium text-gray-900">장비 타입</div>
                <div className="text-sm text-gray-600">
                  {sanitizeText(currentResults.metadata.deviceType)}
                </div>
              </div>
              <div>
                <div className="text-sm font-medium text-gray-900">지침서</div>
                <div className="text-sm text-gray-600">
                  {sanitizeText(currentResults.metadata.framework)}
                </div>
              </div>
              <div>
                <div className="text-sm font-medium text-gray-900">설정 파일 크기</div>
                <div className="text-sm text-gray-600">
                  {sanitizeText(currentResults.metadata.totalLines?.toString() || '0')}줄
                </div>
              </div>
              <div>
                <div className="text-sm font-medium text-gray-900">분석 시간</div>
                <div className="text-sm text-gray-600">
                  {sanitizeText(currentResults.metadata.analysisTime?.toFixed(2) || '0')}초
                </div>
              </div>
              <div>
                <div className="text-sm font-medium text-gray-900">엔진 버전</div>
                <div className="text-sm text-gray-600">
                  {sanitizeText(currentResults.metadata.engineVersion)}
                </div>
              </div>
              <div>
                <div className="text-sm font-medium text-gray-900">분석 시각</div>
                <div className="text-sm text-gray-600">
                  {sanitizeText(new Date(currentResults.metadata.timestamp).toLocaleString('ko-KR'))}
                </div>
              </div>
            </div>

          {currentResults.metadata.contextInfo && (
            <div className="mt-4 pt-4 border-t border-gray-200">
              <div className="text-sm font-medium text-gray-900 mb-2">
                설정 컨텍스트
              </div>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                <div>
                  <span className="text-gray-600">인터페이스:</span>
                  <span className="ml-1 font-medium">
                    {currentResults.metadata.contextInfo.totalInterfaces || 0}개
                  </span>
                </div>
                <div>
                  <span className="text-gray-600">활성 인터페이스:</span>
                  <span className="ml-1 font-medium">
                    {currentResults.metadata.contextInfo.activeInterfaces || 0}
                    개
                  </span>
                </div>
                <div>
                  <span className="text-gray-600">설정된 서비스:</span>
                  <span className="ml-1 font-medium">
                    {currentResults.metadata.contextInfo.configuredServices ||
                      0}
                    개
                  </span>
                </div>
                <div>
                  <span className="text-gray-600">복잡도:</span>
                  <span className="ml-1 font-medium">
                    {currentResults.metadata.contextInfo.configComplexity ||
                      'N/A'}
                  </span>
                </div>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Filter and Vulnerabilities List - 이제 분석 상세 정보 아래에 위치 */}
      {currentResults && (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200">
          <div className="px-6 py-4 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-gray-900">
                탐지된 취약점 ({filteredVulnerabilities.length}개)
                {viewMode === 'comparison' && selectedComparisonFramework && (
                  <span className="ml-2 text-sm font-normal text-gray-500">
                    - {selectedComparisonFramework} 지침서
                  </span>
                )}
              </h3>
              <div className="flex space-x-2">
                {['전체', '고위험', '중위험', '저위험'].map(severity => (
                  <button
                    key={severity}
                    onClick={() => setSelectedSeverity(severity)}
                    className={`px-3 py-1 text-sm font-medium rounded-full transition-colors duration-200 ${
                      selectedSeverity === severity
                        ? 'bg-blue-100 text-blue-800'
                        : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                    }`}
                  >
                    {severity}
                  </button>
                ))}
              </div>
            </div>
          </div>

          <div className="p-6">
            {filteredVulnerabilities.length === 0 ? (
              <div className="text-center py-8">
                <svg
                  className="w-12 h-12 text-gray-400 mx-auto mb-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
                <p className="text-gray-500">
                  {selectedSeverity === '전체'
                    ? '취약점이 발견되지 않았습니다. 훌륭한 보안 설정입니다!'
                    : `${selectedSeverity} 취약점이 없습니다.`}
                </p>
              </div>
            ) : (
              <div className="space-y-4">
                {filteredVulnerabilities.map(vulnerability => (
                  <div
                    key={vulnerability.id}
                    className="border border-gray-200 rounded-lg"
                  >
                    <div
                      className="p-4 cursor-pointer hover:bg-gray-50 transition-colors duration-200"
                      onClick={() =>
                        setExpandedCard(
                          expandedCard === vulnerability.id
                            ? null
                            : vulnerability.id
                        )
                      }
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <span
                            className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${
                              severityColors[vulnerability.severity] ||
                              severityColors[
                                getSeverityDisplay(vulnerability.severity)
                              ]
                            }`}
                          >
                            {severityIcons[vulnerability.severity] ||
                              severityIcons[
                                getSeverityDisplay(vulnerability.severity)
                              ]}
                            <span className="ml-1">
                              {getSeverityDisplay(vulnerability.severity)}
                            </span>
                          </span>
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                            {getCategoryDisplay(
                              vulnerability.type || vulnerability.typeKo
                            )}
                          </span>
                          {vulnerability.ruleId && (
                            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                              {vulnerability.ruleId}
                            </span>
                          )}
                          {vulnerability.framework && (
                            <span
                              className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium"
                              style={{
                                backgroundColor:
                                  getFrameworkInfo(vulnerability.framework)
                                    ?.color + '20',
                                color: getFrameworkInfo(vulnerability.framework)
                                  ?.color,
                              }}
                            >
                              {vulnerability.framework}
                            </span>
                          )}
                        </div>
                        <svg
                          className={`w-5 h-5 text-gray-400 transition-transform duration-200 ${
                            expandedCard === vulnerability.id
                              ? 'transform rotate-180'
                              : ''
                          }`}
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M19 9l-7 7-7-7"
                          />
                        </svg>
                      </div>
                        <div className="mt-2">
                          <h4 className="text-sm font-medium text-gray-900">
                            {sanitizeText(vulnerability.description)}
                          </h4>
                          {vulnerability.line && (
                            <p className="text-xs text-gray-500 mt-1">
                              라인 {vulnerability.line}: {sanitizeText(vulnerability.matchedText)}
                            </p>
                          )}
                        </div>
                    </div>

                    {expandedCard === vulnerability.id && (
                      <div className="px-4 pb-4 border-t border-gray-100">
                        <div className="pt-4">
                          <h5 className="text-sm font-medium text-gray-900 mb-2">
                            권관 사항:
                          </h5>
                          <p className="text-sm text-gray-600 mb-4">
                            {sanitizeText(vulnerability.recommendation)}
                          </p>

                          {vulnerability.reference && (
                            <div className="mb-4">
                              <h5 className="text-sm font-medium text-gray-900 mb-1">
                                참고 자료:
                              </h5>
                              <p className="text-xs text-gray-500">
                                {sanitizeText(vulnerability.reference)}
                              </p>
                            </div>
                          )}
                          <div className="flex space-x-3">
                            <button className="px-3 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 transition-colors duration-200">
                              해결됨으로 표시
                            </button>
                            <button
                              onClick={() => {
                                const details = `${sanitizeText(vulnerability.ruleId || '')}: ${sanitizeText(vulnerability.description)}\n권장사항: ${sanitizeText(vulnerability.recommendation)}\n참고: ${sanitizeText(vulnerability.reference || 'N/A')}`;
                                navigator.clipboard.writeText(details);
                              }}
                              className="px-3 py-1 border border-gray-300 text-gray-700 text-xs rounded hover:bg-gray-50 transition-colors duration-200"
                            >
                              세부 정보 복사
                            </button>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      )}
          {/* AI Remediation Modal */}
    {(showAiRemediation || isAiLoading) && (
      <AIRemediation
        aiResults={aiResults}
        isLoading={isAiLoading}
        onClose={() => {
          setShowAiRemediation(false);
          setAiResults(null);
        }}
        onRetry={handleRetryAIRemediation}
      />
    )}
    </div>
  );
};

export default VulnerabilityResults;
