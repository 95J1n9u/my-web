rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========================================
    // 헬퍼 함수들
    // ========================================
    
    // 사용자 인증 확인
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // 현재 사용자의 UID
    function currentUserId() {
      return request.auth.uid;
    }
    
    // 관리자 권한 확인 (안전한 방식)
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // 중간 관리자 이상 권한 확인 (안전한 방식)
    function isModerator() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'moderator'];
    }
    
    // 데이터 유효성 검증 함수들
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function isValidRole(role) {
      return role in ['user', 'admin', 'moderator', 'premium'];
    }
    
    function isValidString(str, minLen, maxLen) {
      return str is string && str.size() >= minLen && str.size() <= maxLen;
    }
    
    // ========================================
    // 사용자 컬렉션 (/users/{userId})
    // ========================================
    match /users/{userId} {
      // 읽기: 인증된 사용자 + 휴대폰 번호 중복 체크를 위한 제한적 접근
      allow read: if isAuthenticated() || 
                  isPhoneDuplicateCheck();
      
      // 생성: 인증된 사용자가 본인 계정만 생성 가능
      allow create: if isAuthenticated() && 
                    currentUserId() == userId;
      
      // 수정: 본인 또는 관리자
      allow update: if isAuthenticated() && 
                    (currentUserId() == userId || isAdmin());
      
      // 삭제: 관리자만
      allow delete: if isAdmin();
      
      // 🔥 휴대폰 번호 중복 체크를 위한 특별 권한
      function isPhoneDuplicateCheck() {
        return request.auth == null && 
              request.query != null &&
              request.query.limit <= 1 &&
              resource.data.keys().hasOnly(['phoneNumber', 'uid', 'email', 'displayName', 'createdAt', 'role', 'emailVerified', 'phoneVerified', 'lastLoginAt', 'analysisCount', 'preferences', 'provider']);
      }
      
      // 일반 사용자 업데이트 검증 (본인만)
      function isValidUserUpdate(data) {
        let allowedFields = ['displayName', 'photoURL', 'preferences', 'lastLoginAt', 'analysisCount', 'phoneNumber', 'phoneVerified', 'aiUsage', 'lastAIUsedAt'];
        return data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
      }
      
      // 관리자 업데이트 검증
      function isValidAdminUserUpdate(data) {
        return true; // 관리자는 모든 필드 수정 가능
      }
      
      // ========================================
      // 분석 결과 서브컬렉션 (/users/{userId}/analyses/{analysisId})
      // ========================================
      match /analyses/{analysisId} {
        // 읽기: 본인 또는 관리자
        allow read: if isAuthenticated() && 
                    (currentUserId() == userId || isAdmin());
        
        // 생성: 인증된 본인만
        allow create: if isAuthenticated() && 
                      currentUserId() == userId &&
                      isValidAnalysisData(request.resource.data);
        
        // 수정: 본인만 (제한된 필드)
        allow update: if isAuthenticated() && 
                      currentUserId() == userId &&
                      isValidAnalysisUpdate(request.resource.data);
        
        // 삭제: 본인 또는 관리자
        allow delete: if isAuthenticated() && 
                      (currentUserId() == userId || isAdmin());
        
        // 분석 데이터 유효성 검증
        function isValidAnalysisData(data) {
          return data.keys().hasAll(['userId', 'timestamp', 'deviceType', 'framework']) &&
                 data.userId == userId;
        }
        
        // 분석 데이터 업데이트 검증
        function isValidAnalysisUpdate(data) {
          let allowedFields = ['notes', 'status', 'tags'];
          return data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
        }
      }
    }
    
    // ========================================
    // 커뮤니티 게시글 컬렉션 (/posts/{postId})
    // ========================================
    match /posts/{postId} {
      // 읽기: 완전히 공개 - 누구나 모든 게시글 읽기 가능
      allow read: if true;
      
      // 리스트 읽기도 명시적으로 허용
      allow list: if true;
      
      // 생성: 인증된 사용자만
      allow create: if isAuthenticated() && 
                    request.resource.data.authorId == currentUserId();
      
      // 수정: 작성자 본인, 관리자, 또는 조회수 증가
      allow update: if isAuthenticated() && (
                      (resource.data.authorId == currentUserId()) ||
                      (isAdmin()) ||
                      (
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views']) &&
                        request.resource.data.views == resource.data.views + 1
                      )
                    );
      
      // 삭제: 작성자 본인 또는 관리자
      allow delete: if isAuthenticated() && 
                    (resource.data.authorId == currentUserId() || isAdmin());
      
      // 댓글 서브컬렉션
      match /comments/{commentId} {
        // 읽기: 모든 사람 허용
        allow read: if true;
        
        // 생성: 인증된 사용자만
        allow create: if isAuthenticated() && 
                      isValidCommentData(request.resource.data);
        
        // 수정: 작성자 본인 또는 관리자
        allow update: if isAuthenticated() && 
                      (resource.data.authorId == currentUserId() || isAdmin());
        
        // 삭제: 작성자 본인 또는 관리자
        allow delete: if isAuthenticated() && 
                      (resource.data.authorId == currentUserId() || isAdmin());
        
        // 댓글 데이터 유효성 검증
        function isValidCommentData(data) {
          return data.keys().hasAll(['content', 'authorId', 'createdAt']) &&
                 isValidString(data.content, 1, 1000) &&
                 data.authorId == currentUserId();
        }
      }
    }
    
    // ========================================
    // 공지사항 컬렉션 (/notices/{noticeId})
    // ========================================
    match /notices/{noticeId} {
      // 읽기: 모든 사람 허용 (공지사항과 리스트 쿼리 모두)
      allow read: if true;
      
      // 생성: 관리자만
      allow create: if isAdmin() && isValidNoticeData(request.resource.data);
      
      // 수정: 관리자 또는 조회수 증가
      allow update: if isAuthenticated() && (
                      (isAdmin() && isValidNoticeUpdate(request.resource.data)) ||
                      (
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views']) &&
                        request.resource.data.views == resource.data.views + 1
                      )
                    );
      
      // 삭제: 관리자만
      allow delete: if isAdmin();
      
      // 공지사항 데이터 유효성 검증
      function isValidNoticeData(data) {
        let validCategories = ['general', 'maintenance', 'update', 'security', 'event'];
        let validPriorities = ['normal', 'high', 'urgent'];
        return data.keys().hasAll(['title', 'content', 'category', 'priority', 'authorId', 'createdAt', 'isPublished']) &&
               isValidString(data.title, 1, 200) &&
               isValidString(data.content, 1, 10000) &&
               data.category in validCategories &&
               data.priority in validPriorities &&
               data.authorId == currentUserId() &&
               data.isPublished == true;
      }
      
      // 공지사항 업데이트 검증
      function isValidNoticeUpdate(data) {
        let allowedFields = ['title', 'content', 'category', 'priority', 'isPinned', 'expiresAt', 'updatedAt', 'updatedBy', 'views'];
        return data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
      }
    }
    
    // ========================================
    // 시스템 설정 컬렉션 (/system/{configId})
    // ========================================
    match /system/{configId} {
      // 읽기: 관리자만
      allow read: if isAdmin();
      
      // 쓰기: 관리자만
      allow write: if isAdmin();
    }
    
    // ========================================
    // 시스템 통계 컬렉션 (/stats/{statId})
    // ========================================
    match /stats/{statId} {
      // 읽기: 관리자만
      allow read: if isAdmin();
      
      // 쓰기: 관리자만
      allow write: if isAdmin();
    }
    
    // ========================================
    // 기본 거부 규칙 (명시되지 않은 모든 컬렉션/문서)
    // ========================================
    match /{document=**} {
      allow read, write: if false;
    }
  }
}